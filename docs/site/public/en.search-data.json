{"/about/":{"data":{"":" Bidirectional, low-latency and secure communication for every platform.\narachne.ws is a cutting-edge WebSocket framework meticulously designed to power enterprise-grade applications with an uncompromising emphasis on security and performance. It harnesses advanced encryption techniques to safeguard every transmission, ensuring data integrity without ever sacrificing speed. With its ultra-low latency architecture, arachne.ws delivers real-time connectivity that stays responsive and efficient, even under the toughest workloads. Whether you‚Äôre crafting systems where every second counts, platforms that demand unbreachable privacy, or dynamic applications requiring seamless interaction, arachne.ws offers a rock-solid foundation that scales effortlessly to match your ambitions.\nDrawing inspiration from top-tier frameworks, arachne.ws elevates the game with a modern, modular API that accelerates development and minimizes headaches, empowering developers to build robust solutions fast and focus on what matters‚Äîinnovation. For project managers, it‚Äôs a game-changer: its built-in security aligns with industry standards, streamlining compliance and guaranteeing top-notch protection, while its performance optimizations ensure your applications can grow without costly reworks. Step into the future of secure, high-performance communication with arachne.ws‚Äîwhere technical excellence meets practical reliability.","credits#Credits":"Hextra cannot be built without the following tools and inspirations:\nHextra Project ","philosophy#Philosophy":" Built for speed and security, designed for seamless accessibility.\narachne.ws is powered by Rust, a language renowned for its blazing-fast performance and exceptional memory safety. By leveraging Rust‚Äôs efficiency, arachne.ws delivers ultra-low-latency communication without compromising security. However, performance alone isn‚Äôt enough‚Äîaccessibility matters.\nTo ensure seamless integration across diverse ecosystems, arachne.ws provides language bindings for platforms like Node.js, Go, and more, enabling developers to harness its power in their preferred environments. Whether you‚Äôre working with modern JavaScript runtimes, backend services in Go, or other high-performance stacks, arachne.ws bridges the gap‚Äîoffering uncompromising speed, security, and ease of use across multiple languages."},"title":"About"},"/blog/":{"data":{"":" RSS Feed "},"title":"Blog"},"/docs/":{"data":{"":"üëã Hello! Welcome to the Hextra documentation!","features#Features":" Beautiful Design - Inspired by Nextra, Hextra utilizes Tailwind CSS to offer a modern design that makes your site look outstanding. Responsive Layout and Dark Mode - It looks great on all devices, from mobile, tablet to desktop. Dark mode is also supported to accommodate various lighting conditions. Fast and Lightweight - Powered by Hugo, a lightning-fast static-site generator housed in a single binary file, Hextra keeps its footprint minimal. No JavaScript or Node.js are needed to use it. Full-text Search - Built-in offline full-text search powered by FlexSearch, no additional configuration required. Battery-included - Markdown, syntax highlighting, LaTeX math formulae, diagrams and Shortcodes elements to enhance your content. Table of contents, breadcrumbs, pagination, sidebar navigation and more are all automatically generated. Multi-language and SEO Ready - Multi-language sites made easy with Hugo‚Äôs multilingual mode. Out-of-the-box support is included for SEO tags, Open Graph, and Twitter Cards. ","next#Next":"Dive right into the following section to get started:\nGetting StartedLearn how to create website using Hextra ","questions-or-feedback#Questions or Feedback?":" ‚ùì Hextra is still in active development. Have a question or feedback? Feel free to open an issue! ","what-is-hextra#What is Hextra?":"Hextra is a modern, fast and batteries-included [Hugo][hugo] theme built with [Tailwind CSS][tailwind-css].\nDesigned for building beautiful websites for documentation, blogs, and websites, it provides out-of-the-box features and flexibility to meet various requirements."},"title":"Documentation"},"/docs/concepts/":{"data":{"":"This section covers the concepts of the arachne protocol.\nHandshake "},"title":"Concepts"},"/docs/concepts/handshake/":{"data":{"":""},"title":"Handshake"},"/docs/guide/":{"data":{"":"Explore the following sections to learn how to use Hextra:\nInstallation "},"title":"Guide"},"/docs/guide/installation/":{"data":{"":"","add-images#Add Images":"To add images, the easiest way is to put the image files in the same directory as the Markdown file. For example, add an image file image.png alongside the my-page.md file:\ncontent docs my-page.md image.png Then, we can use the following Markdown syntax to add the image to the content:\ncontent/docs/my-page.md![](image.png) We can also utilize the page bundles feature of Hugo to organize the image files together with the Markdown file. To achieve that, turn the my-page.md file into a directory my-page and put the content into a file named index.md, and put the image files inside the my-page directory:\ncontent docs my-page index.md image.png content/docs/my-page/index.md![](image.png) Alternatively, we can also put the image files in the static directory, which will make the images available for all pages:\nstatic images image.png content docs my-page.md Note that the image path begins with a slash / and is relative to the static directory:\ncontent/docs/my-page.md![](/images/image.png) ","breadcrumb-navigation#Breadcrumb Navigation":"Breadcrumbs are auto-generated based on the directory structure of /content.\nFor example, consider the file structure demonstrated above. Given that structure, the breadcrumbs atop the page at /docs/guide/organize-files/ would appear automatically as follows:\nDocumentation \u003e Guide \u003e Organize Files Customizing Breadcrumb Link Titles By default, each breadcrumb link is generated based on that page‚Äôs title parameter. You can customize this by specifying a linkTitle.\nFor example, if instead of Organize Files we wanted the breadcrumb to be Foo Bar:\ncontent/docs/guide/organize-files.md--- linkTitle: Foo Bar title: Organize Files --- This would now generate the following breadcrumbs:\nDocumentation \u003e Guide \u003e Foo Bar Hiding Breadcrumbs You can hide breadcrumbs completely from a page by specifying breadcrumbs: false in its front matter:\ncontent/docs/guide/organize-files.md--- breadcrumbs: false title: Organize Files --- ","configure-content-directory#Configure Content Directory":"By default, the root content/ directory is used by Hugo to build the site. If you need to use a different directory for content, for example docs/, this can be done by setting the contentDir parameter in the site configuration hugo.yaml.","directory-structure#Directory Structure":"By default, Hugo searches for Markdown files in the content directory, and the structure of the directory determines the final output structure of your website. Take this site as an example:\ncontent _index.md docs _index.md getting-started.md guide _index.md organize-files.md blog _index.md post-1.md Each of the _index.md files is the index page for the corresponding section. The other Markdown files are regular pages.\ncontent ‚îú‚îÄ‚îÄ _index.md // \u003c- / ‚îú‚îÄ‚îÄ docs ‚îÇ ‚îú‚îÄ‚îÄ _index.md // \u003c- /docs/ ‚îÇ ‚îú‚îÄ‚îÄ getting-started.md // \u003c- /docs/getting-started/ ‚îÇ ‚îî‚îÄ‚îÄ guide ‚îÇ ‚îú‚îÄ‚îÄ _index.md // \u003c- /docs/guide/ ‚îÇ ‚îî‚îÄ‚îÄ organize-files.md // \u003c- /docs/guide/organize-files/ ‚îî‚îÄ‚îÄ blog ‚îú‚îÄ‚îÄ _index.md // \u003c- /blog/ ‚îî‚îÄ‚îÄ post-1.md // \u003c- /blog/post-1/ ","layouts#Layouts":"Hextra offers three layouts for different content types:\nLayout Directory Features docs content/docs/ Ideal for structured documentation, same as this section. blog content/blog/ For blog postings, with both listing and detailed article views. default All other directories Single-page article view without sidebar. To customize a section to mirror the behavior of a built-in layout, specify the desired type in the front matter of the section‚Äôs _index.md.\ncontent/my-docs/_index.md--- title: My Docs cascade: type: docs --- The above example configuration ensures that the content files inside content/my-docs/ will be treated as documentation (docs type) by default.","sidebar-navigation#Sidebar Navigation":"The sidebar navigation is generated automatically based on the content organization alphabetically. To manually configure the sidebar order, we can use the weight parameter in the front matter of the Markdown files.\ncontent/docs/guide/_index.md--- title: Guide weight: 2 --- ‚ÑπÔ∏è It is recommended to keep the sidebar not too deep. If you have a lot of content, consider splitting them into multiple sections. "},"title":"Installation"},"/docs/introduction/":{"data":{"":"","next#Next":"Explore the following sections to start adding more contents:\nOrganize Files Configuration Markdown ","quick-start-from-template#Quick Start from Template":" imfing/hextra-starter-template\nYou could quickly get started by using the above template repository.\nWe have provided a GitHub Actions workflow which can help automatically build and deploy your site to GitHub Pages, and host it for free. For more options, check out Deploy Site.\nüåê Demo ‚Üó","start-as-new-project#Start as New Project":"There are two main ways to add the Hextra theme to your Hugo project:\nHugo Modules (Recommended): The simplest and recommended method. Hugo modules let you pull in the theme directly from its online source. Theme is downloaded automatically and managed by Hugo.\nGit Submodule: Alternatively, add Hextra as a Git Submodule. The theme is downloaded by Git and stored in your project‚Äôs themes folder.\nSetup Hextra as Hugo module Prerequisites Before starting, you need to have the following software installed:\nHugo (extended version) Git Go Steps Initialize a new Hugo site hugo new site my-site --format=yaml Configure Hextra theme via module # initialize hugo module cd my-site hugo mod init github.com/username/my-site # add Hextra theme hugo mod get github.com/imfing/hextra Configure hugo.yaml to use Hextra theme by adding the following:\nmodule: imports: - path: github.com/imfing/hextra Create your first content pages Create new content page for the home page and the documentation page:\nhugo new content/_index.md hugo new content/docs/_index.md Preview the site locally hugo server --buildDrafts --disableFastRender Voila, your new site preview is available at http://localhost:1313/.\nHow to update theme? To update all Hugo modules in your project to their latest versions, run the following command:\nhugo mod get -u To update Hextra to the latest released version, run the following command:\nhugo mod get -u github.com/imfing/hextra See Hugo Modules for more details.\nSetup Hextra as Git submodule Prerequisites Before starting, you need to have the following software installed:\nHugo (extended version) Git Steps Initialize a new Hugo site hugo new site my-site --format=yaml Add Hextra theme as a Git submodule git submodule add https://github.com/imfing/hextra.git themes/hextra Configure hugo.yaml to use Hextra theme by adding the following:\ntheme: hextra Create your first content pages Create new content page for the home page and the documentation page:\nhugo new content/_index.md hugo new content/docs/_index.md Preview the site locally hugo server --buildDrafts --disableFastRender Your new site preview is available at http://localhost:1313/.\nWhen using CI/CD for Hugo website deployment, it‚Äôs essential to ensure that the following command is executed before running the hugo command.\ngit submodule update --init Failure to run this command results in the theme folder not being populated with Hextra theme files, leading to a build failure.\nHow to update theme? To update all submodules in your repository to their latest commits, run the following command:\ngit submodule update --remote To update Hextra to the latest commit, run the following command:\ngit submodule update --remote themes/hextra See Git submodules for more details."},"title":"Introduction"}}